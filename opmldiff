#!/usr/bin/ruby

# ompldiff
# Author: Steve Hoeksema <steve@seven.net.nz>
#         http://www.seven.net.nz
# License: Creative Commons Attribution-Share Alike 3.0 New Zealand
#          http://creativecommons.org/licenses/by-sa/3.0/nz/

require 'pathname'
require 'open-uri'
require 'rubygems'
require "rexml/document"
require 'builder'

class Pair

  attr_accessor :opml1, :opml2, :backup

  def initialize(opml1, opml2)
	  @opml1, @opml2 = Pathname.new(opml1), Pathname.new(opml2)
	  @backup = @opml1.dirname + (@opml1.basename.to_s + '.backup')
  end

end

def stripSchemeFromURL(url)
  uri = URI.parse(url)
  return url.sub(uri.scheme + "://", "")
#  return uri.host.sub("www.","")
end

def allFeedURLs(file, path)
  feedURLs = []
  file.elements.each(path) do |feed|
    xmlUrl = feed.attributes['xmlUrl']
    if xmlUrl != nil
      # sometimes the URLs can be from different schemes (http and https)
      feedURLs << stripSchemeFromURL(xmlUrl)
    end
  end
  return feedURLs
end

def allFeedsNotInList(file, path, existingFeedUrls)
  feeds = []
  file.elements.each(path) do |feed|
    xmlUrl = feed.attributes['xmlUrl']
    if xmlUrl != nil
      xmlUrl = stripSchemeFromURL(xmlUrl)
      unless existingFeedUrls.include? xmlUrl
        feeds << feed
      end
    end
  end
  return feeds
end

pairs = []
feeds = []

unless ARGV.size.modulo(2) == 0 && ARGV.size > 0
  $stderr.puts "opmldiff 0.1"
  $stderr.puts "Expects pairs of OPML files, the first which must be a local file, and the second can be a URL or a local file."
  $stderr.puts
  $stderr.puts "Usage:"
  $stderr.puts "  opmldiff <OPML1> <OPML2>[ <OPML3> <OPML4>...]"
  $stderr.puts "Example:"
  $stderr.puts "  opmldiff /path/to/opml.xml http://www.example.com/opml.xml"
  $stderr.puts
  exit
end

(0...ARGV.size).step(2) do |i|
  pairs << Pair.new(ARGV[i], ARGV[i+1])
end

for pair in pairs

  raise "Original OPML file must be readable" unless pair.opml1.readable?
  
  raise "Original OPML file must be writable" unless pair.opml1.writable?
  
  if pair.backup.exist?
    raise "Backup OPML file must be writable" unless pair.backup.writable?
  else
    raise "Backup directory must be writable" unless pair.backup.dirname.writable?
  end
  
  existing_opml = REXML::Document.new open(pair.opml1.to_s)

  existing_feed_urls = allFeedURLs(existing_opml, 'opml/body/outline') + allFeedURLs(existing_opml, 'opml/body/outline/outline')

  puts existing_feed_urls.count


  new_opml = REXML::Document.new open(pair.opml2.to_s)
  feeds = allFeedsNotInList(new_opml, '/opml/body/outline', existing_feed_urls) + allFeedsNotInList(new_opml, '/opml/body/outline/outline', existing_feed_urls)

  puts feeds.count

  # File.open(pair.backup, 'w') { |f| f.write(existing_opml.to_s) }
  
  # File.open(pair.opml1, 'w') { |f| f.write(new_opml.to_s) }
  
end

xml = Builder::XmlMarkup.new(:target => $stdout, :indent => 2)
xml.instruct!
xml.opml do
  xml.head do
    xml.title "OPMLDiff"
    xml.dateModified Time.now
    xml.ownerName "Steve Hoeksema"
    xml.ownerEmail "steve@seven.net.nz"
  end
  xml.body do
    for feed in feeds do
      xml.outline(
        :type => feed.attributes['type'],
        :text => feed.attributes['text'],
        :title => feed.attributes['title'],
        :xmlUrl => feed.attributes['xmlUrl']
      )
    end
  end
end
